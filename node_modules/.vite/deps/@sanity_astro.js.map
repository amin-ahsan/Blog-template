{
  "version": 3,
  "sources": ["../../@sanity/astro/dist/sanity-astro.mjs"],
  "sourcesContent": ["function o(i) {\n  const t = \"virtual:sanity-init\", n = \"\\0\" + t;\n  return {\n    name: \"vite-plugin-sanity-init\",\n    resolveId(s) {\n      if (s === t)\n        return n;\n    },\n    load(s) {\n      if (s === n)\n        return `\n          import { createClient } from \"@sanity/client\";\n          export const sanityClientInstance = createClient(\n            ${JSON.stringify(i)}\n          );\n        `;\n    }\n  };\n}\nfunction r(i, t) {\n  const n = \"virtual:sanity-studio\", s = n;\n  return {\n    name: \"vite-plugin-sanity-studio\",\n    resolveId(e) {\n      return e === n ? s : null;\n    },\n    async load(e) {\n      if (e === \"virtual:sanity-studio\") {\n        if (t.output !== \"hybrid\" && t.output !== \"server\")\n          throw new Error(\n            \"[@sanity/astro]: Sanity Studio requires `output: 'hybrid'` or `output: 'server'` in your Astro config\"\n          );\n        const a = await this.resolve(\"/sanity.config\");\n        if (!a)\n          throw new Error(\n            \"[@sanity/astro]: Sanity Studio requires a `sanity.config.ts|js` file in your project root.\"\n          );\n        if (!i.studioBasePath)\n          throw new Error(\n            \"[@sanity/astro]: The `studioBasePath` option is required in `astro.config.mjs`. For example â€” `studioBasePath: '/admin'`\"\n          );\n        return `\n        import config from \"${a.id}\";\n        if (config.basePath) {\n          if (config.basePath !== \"/${i.studioBasePath}\") {\n            console.warn(\n              \"[@sanity/astro]: This integration ignores the basePath setting in sanity.config.ts|js. To set the basePath for Sanity Studio, use the studioBasePath option in astro.config.mjs and remove it from sanity.config.ts.\");\n          }\n        }\n\n        export default {\n          ...config,\n          // override basePath from sanity.config.ts|js with plugin setting\n          basePath: \"/${i.studioBasePath}\",\n        }`;\n      }\n      return null;\n    }\n  };\n}\nfunction l() {\n  return globalThis.sanityClientInstance || console.error(\n    \"[@sanity/astro]: sanityClientInstance has not been initialized correctly\"\n  ), globalThis.sanityClientInstance;\n}\nconst u = {\n  apiVersion: \"v2023-08-24\"\n};\nfunction d(i) {\n  const t = {\n    ...u,\n    ...i\n  };\n  return {\n    name: \"@sanity/astro\",\n    hooks: {\n      \"astro:config:setup\": ({\n        injectScript: n,\n        injectRoute: s,\n        updateConfig: e,\n        config: a\n      }) => {\n        e({\n          vite: {\n            plugins: [\n              o(t),\n              r(t, a)\n            ]\n          }\n        }), t.studioBasePath && s({\n          entryPoint: \"@sanity/astro/studio/studio-route.astro\",\n          pattern: `/${t.studioBasePath}/[...params]`,\n          prerender: !1\n        }), n(\n          \"page-ssr\",\n          `\n          import { sanityClientInstance } from \"virtual:sanity-init\";\n          globalThis.sanityClientInstance = sanityClientInstance;\n          `\n        );\n      }\n    }\n  };\n}\nexport {\n  d as default,\n  l as useSanityClient\n};\n"],
  "mappings": ";;;AAAA,SAAS,EAAE,GAAG;AACZ,QAAM,IAAI,uBAAuB,IAAI,OAAO;AAC5C,SAAO;AAAA,IACL,MAAM;AAAA,IACN,UAAU,GAAG;AACX,UAAI,MAAM;AACR,eAAO;AAAA,IACX;AAAA,IACA,KAAK,GAAG;AACN,UAAI,MAAM;AACR,eAAO;AAAA;AAAA;AAAA,cAGD,KAAK,UAAU,CAAC,CAAC;AAAA;AAAA;AAAA,IAG3B;AAAA,EACF;AACF;AACA,SAAS,EAAE,GAAG,GAAG;AACf,QAAM,IAAI,yBAAyB,IAAI;AACvC,SAAO;AAAA,IACL,MAAM;AAAA,IACN,UAAU,GAAG;AACX,aAAO,MAAM,IAAI,IAAI;AAAA,IACvB;AAAA,IACA,MAAM,KAAK,GAAG;AACZ,UAAI,MAAM,yBAAyB;AACjC,YAAI,EAAE,WAAW,YAAY,EAAE,WAAW;AACxC,gBAAM,IAAI;AAAA,YACR;AAAA,UACF;AACF,cAAM,IAAI,MAAM,KAAK,QAAQ,gBAAgB;AAC7C,YAAI,CAAC;AACH,gBAAM,IAAI;AAAA,YACR;AAAA,UACF;AACF,YAAI,CAAC,EAAE;AACL,gBAAM,IAAI;AAAA,YACR;AAAA,UACF;AACF,eAAO;AAAA,8BACe,EAAE,EAAE;AAAA;AAAA,sCAEI,EAAE,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAS9B,EAAE,cAAc;AAAA;AAAA,MAElC;AACA,aAAO;AAAA,IACT;AAAA,EACF;AACF;AACA,SAAS,IAAI;AACX,SAAO,WAAW,wBAAwB,QAAQ;AAAA,IAChD;AAAA,EACF,GAAG,WAAW;AAChB;AACA,IAAM,IAAI;AAAA,EACR,YAAY;AACd;AACA,SAAS,EAAE,GAAG;AACZ,QAAM,IAAI;AAAA,IACR,GAAG;AAAA,IACH,GAAG;AAAA,EACL;AACA,SAAO;AAAA,IACL,MAAM;AAAA,IACN,OAAO;AAAA,MACL,sBAAsB,CAAC;AAAA,QACrB,cAAc;AAAA,QACd,aAAa;AAAA,QACb,cAAc;AAAA,QACd,QAAQ;AAAA,MACV,MAAM;AACJ,UAAE;AAAA,UACA,MAAM;AAAA,YACJ,SAAS;AAAA,cACP,EAAE,CAAC;AAAA,cACH,EAAE,GAAG,CAAC;AAAA,YACR;AAAA,UACF;AAAA,QACF,CAAC,GAAG,EAAE,kBAAkB,EAAE;AAAA,UACxB,YAAY;AAAA,UACZ,SAAS,IAAI,EAAE,cAAc;AAAA,UAC7B,WAAW;AAAA,QACb,CAAC,GAAG;AAAA,UACF;AAAA,UACA;AAAA;AAAA;AAAA;AAAA,QAIF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF;",
  "names": []
}
