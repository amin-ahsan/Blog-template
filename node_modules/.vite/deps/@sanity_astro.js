import "./chunk-UXIASGQL.js";

// node_modules/@sanity/astro/dist/sanity-astro.mjs
function o(i) {
  const t = "virtual:sanity-init", n = "\0" + t;
  return {
    name: "vite-plugin-sanity-init",
    resolveId(s) {
      if (s === t)
        return n;
    },
    load(s) {
      if (s === n)
        return `
          import { createClient } from "@sanity/client";
          export const sanityClientInstance = createClient(
            ${JSON.stringify(i)}
          );
        `;
    }
  };
}
function r(i, t) {
  const n = "virtual:sanity-studio", s = n;
  return {
    name: "vite-plugin-sanity-studio",
    resolveId(e) {
      return e === n ? s : null;
    },
    async load(e) {
      if (e === "virtual:sanity-studio") {
        if (t.output !== "hybrid" && t.output !== "server")
          throw new Error(
            "[@sanity/astro]: Sanity Studio requires `output: 'hybrid'` or `output: 'server'` in your Astro config"
          );
        const a = await this.resolve("/sanity.config");
        if (!a)
          throw new Error(
            "[@sanity/astro]: Sanity Studio requires a `sanity.config.ts|js` file in your project root."
          );
        if (!i.studioBasePath)
          throw new Error(
            "[@sanity/astro]: The `studioBasePath` option is required in `astro.config.mjs`. For example â€” `studioBasePath: '/admin'`"
          );
        return `
        import config from "${a.id}";
        if (config.basePath) {
          if (config.basePath !== "/${i.studioBasePath}") {
            console.warn(
              "[@sanity/astro]: This integration ignores the basePath setting in sanity.config.ts|js. To set the basePath for Sanity Studio, use the studioBasePath option in astro.config.mjs and remove it from sanity.config.ts.");
          }
        }

        export default {
          ...config,
          // override basePath from sanity.config.ts|js with plugin setting
          basePath: "/${i.studioBasePath}",
        }`;
      }
      return null;
    }
  };
}
function l() {
  return globalThis.sanityClientInstance || console.error(
    "[@sanity/astro]: sanityClientInstance has not been initialized correctly"
  ), globalThis.sanityClientInstance;
}
var u = {
  apiVersion: "v2023-08-24"
};
function d(i) {
  const t = {
    ...u,
    ...i
  };
  return {
    name: "@sanity/astro",
    hooks: {
      "astro:config:setup": ({
        injectScript: n,
        injectRoute: s,
        updateConfig: e,
        config: a
      }) => {
        e({
          vite: {
            plugins: [
              o(t),
              r(t, a)
            ]
          }
        }), t.studioBasePath && s({
          entryPoint: "@sanity/astro/studio/studio-route.astro",
          pattern: `/${t.studioBasePath}/[...params]`,
          prerender: false
        }), n(
          "page-ssr",
          `
          import { sanityClientInstance } from "virtual:sanity-init";
          globalThis.sanityClientInstance = sanityClientInstance;
          `
        );
      }
    }
  };
}
export {
  d as default,
  l as useSanityClient
};
//# sourceMappingURL=@sanity_astro.js.map
